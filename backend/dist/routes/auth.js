"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.io = exports.router = void 0;
const express_1 = require("express");
const authController_1 = require("../controllers/authController");
const moneyController_1 = require("../controllers/moneyController");
const notifyController_1 = require("../controllers/notifyController");
const ProfileManager_1 = require("../controllers/ProfileManager");
const battleManger_1 = require("../controllers/battleManger");
const app_1 = require("../app");
Object.defineProperty(exports, "io", { enumerable: true, get: function () { return app_1.io; } });
const multerService_1 = require("../utils/multerService");
const stateManager_1 = require("../controllers/stateManager");
const adminController_1 = require("../controllers/adminController");
const router = (0, express_1.Router)();
exports.router = router;
router.post('/send-otp', authController_1.sendOtp);
router.post('/verify-otp', authController_1.verifyOtp);
router.get('/me', authController_1.autoLogin);
router.get('/health', adminController_1.health);
router.post('/logout', authController_1.logOut);
router.post('/deposit', multerService_1.upload.single('image'), moneyController_1.depositAmount);
router.post('/withdraw', moneyController_1.withdrawAmount);
router.post('/verify-payment', moneyController_1.verifyPayment);
router.post('/reject-payment', moneyController_1.rejectPayment);
router.post('/verify-kyc', ProfileManager_1.verifyKyc);
router.post('/reject-kyc', ProfileManager_1.rejectKyc);
router.get('/notifications', notifyController_1.getNotifications);
router.post('/update-Profile', ProfileManager_1.updateProfile);
router.get('/update-Amount', ProfileManager_1.updateAmount);
router.post('/battles/create', battleManger_1.createBattle);
router.post('/battles/join', battleManger_1.joinBattle);
router.post('/battles/manageRequest', battleManger_1.manageRequest);
router.post('/battles/setLudoCode', battleManger_1.handleLudoCode);
router.get('/battles/pending', battleManger_1.pendingBattle);
router.get('/battles/inBattle', battleManger_1.inProgressBattle);
router.get('/battles/runningBattle', battleManger_1.runningBattle);
router.get('/battles/disputeBattle', battleManger_1.disputeBattle);
router.post('/battles/disputeBattle/approve', battleManger_1.determineWinner);
router.post('/battles/disputeBattle/reject', battleManger_1.rejectDispute);
router.post('/battles/:id/complete', battleManger_1.completeBattle);
router.post('/battles/inBattle/uploads', multerService_1.upload.single('image'), battleManger_1.uploadScreenShot);
router.post('/battles/inBattle/canceled', battleManger_1.canceledBattle);
router.post('/battles/inBattle/lost', battleManger_1.battleLost);
router.get('/battles/battleHistory', battleManger_1.battleHistory);
router.get('/battles', battleManger_1.showBattles);
router.post('/deleteBattle', battleManger_1.deleteBattle);
router.get('/getProfiles', ProfileManager_1.getProfile);
router.get('/kycProfiles', ProfileManager_1.kycCompletedProfiles);
router.get('/findProfile', ProfileManager_1.findProfile);
router.post('/blockPlayer', ProfileManager_1.blockedPlayer);
router.get('/blockedOnes', ProfileManager_1.getBlockedOnes);
router.post('/unblockPlayer', ProfileManager_1.unBlockPlayer);
router.post('/createState', stateManager_1.createState);
router.post('/kyc', multerService_1.upload.fields([
    { name: "image", maxCount: 1 },
    { name: "image2", maxCount: 1 }
]), ProfileManager_1.completeKYC);
router.get('/transaction', moneyController_1.getTransaction);
router.get('/allTransaction', moneyController_1.AllTransaction);
router.get('/reqTransaction', moneyController_1.ReqTransaction);
router.get('/findTransaction', moneyController_1.findTransaction);
router.get('/allNotifications', notifyController_1.allNotifications);
router.get('/getReferral', ProfileManager_1.getReferal);
router.post('/redeemEarnings', ProfileManager_1.getReferalEarning);
router.get('/getAdmin', adminController_1.getAdmin);
router.post('/markRead', notifyController_1.markAsRead);
router.post('/createAdminDetails', adminController_1.createAdminDetails);
router.get('/check-admin', adminController_1.onlyAdmins);
router.post('/supportSettings', adminController_1.supportSettings);
router.post('/infoSettings', adminController_1.infoSettings);
router.post('/QRSettings', multerService_1.upload.single('image'), adminController_1.QRsettings);
router.post('/UPISettings', adminController_1.UPIsettings);
router.post('/depositProof', multerService_1.upload.single("image"), moneyController_1.paymentProof);
